<?php
/**
 * Author: Nil Portugués Calderó <contact@nilportugues.com>
 * Date: 9/16/14
 * Time: 9:42 PM
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
$base = '\NilPortugues\Validator\Traits';

return [

    //Generic
    'Generic::isRequired'                    => $base.'\GenericTrait::isRequired',
    'Generic::isNotNull'                     => $base.'\GenericTrait::isNotNull',
    //Float
    "Float::__construct"                     => $base.'\Float\FloatTrait::isFloat',
    "Float::isNotZero"                       => $base.'\Float\FloatTrait::isNotZero',
    "Float::isPositive"                      => $base.'\Float\FloatTrait::isPositive',
    "Float::isPositiveOrZero"                => $base.'\Float\FloatTrait::isPositiveOrZero',
    "Float::isNegative"                      => $base.'\Float\FloatTrait::isNegative',
    "Float::isNegativeOrZero"                => $base.'\Float\FloatTrait::isNegativeOrZero',
    "Float::isBetween"                       => $base.'\Float\FloatTrait::isBetween',
    'Float::isOdd'                           => $base.'\Float\FloatTrait::isOdd',
    'Float::isEven'                          => $base.'\Float\FloatTrait::isEven',
    'Float::isMultiple'                      => $base.'\Float\FloatTrait::isMultiple',
    //Integer
    "Integer::__construct"                   => $base.'\Integer\IntegerTrait::isInteger',
    "Integer::isNotZero"                     => $base.'\Integer\IntegerTrait::isNotZero',
    "Integer::isPositive"                    => $base.'\Integer\IntegerTrait::isPositive',
    "Integer::isPositiveOrZero"              => $base.'\Integer\IntegerTrait::isPositiveOrZero',
    "Integer::isNegative"                    => $base.'\Integer\IntegerTrait::isNegative',
    "Integer::isNegativeOrZero"              => $base.'\Integer\IntegerTrait::isNegativeOrZero',
    "Integer::isBetween"                     => $base.'\Integer\IntegerTrait::isBetween',
    'Integer::isOdd'                         => $base.'\Integer\IntegerTrait::isOdd',
    'Integer::isEven'                        => $base.'\Integer\IntegerTrait::isEven',
    'Integer::isMultiple'                    => $base.'\Integer\IntegerTrait::isMultiple',
    //String
    'String::__construct'                    => $base.'\String\StringTrait::isString',
    'String::isAlphanumeric'                 => $base.'\String\StringTrait::isAlphanumeric',
    'String::isAlpha'                        => $base.'\String\StringTrait::isAlpha',
    'String::isBetween'                      => $base.'\String\StringTrait::isBetween',
    'String::isCharset'                      => $base.'\String\StringTrait::isCharset',
    'String::isAllConsonants'                => $base.'\String\StringTrait::isAllConsonants',
    'String::contains'                       => $base.'\String\StringTrait::contains',
    'String::isControlCharacters'            => $base.'\String\StringTrait::isControlCharacters',
    'String::isDigit'                        => $base.'\String\StringTrait::isDigit',
    'String::endsWith'                       => $base.'\String\StringTrait::endsWith',
    'String::equals'                         => $base.'\String\StringTrait::equals',
    'String::in'                             => $base.'\String\StringTrait::in',
    'String::hasGraphicalCharsOnly'          => $base.'\String\StringTrait::hasGraphicalCharsOnly',
    'String::hasLength'                      => $base.'\String\StringTrait::hasLength',
    'String::isLowercase'                    => $base.'\String\StringTrait::isLowercase',
    'String::notEmpty'                       => $base.'\String\StringTrait::notEmpty',
    'String::noWhitespace'                   => $base.'\String\StringTrait::noWhitespace',
    'String::hasPrintableCharsOnly'          => $base.'\String\StringTrait::hasPrintableCharsOnly',
    'String::isPunctuation'                  => $base.'\String\StringTrait::isPunctuation',
    'String::matchesRegex'                   => $base.'\String\StringTrait::matchesRegex',
    'String::isSlug'                         => $base.'\String\StringTrait::isSlug',
    'String::isSpace'                        => $base.'\String\StringTrait::isSpace',
    'String::startsWith'                     => $base.'\String\StringTrait::startsWith',
    'String::isUppercase'                    => $base.'\String\StringTrait::isUppercase',
    'String::isVersion'                      => $base.'\String\StringTrait::isVersion',
    'String::isVowel'                        => $base.'\String\StringTrait::isVowel',
    'String::isHexDigit'                     => $base.'\String\StringTrait::isHexDigit',
    'String::hasLowercase'                   => $base.'\String\StringTrait::hasLowercase',
    'String::hasUppercase'                   => $base.'\String\StringTrait::hasUppercase',
    'String::hasNumeric'                     => $base.'\String\StringTrait::hasNumeric',
    'String::hasSpecialCharacters'           => $base.'\String\StringTrait::hasSpecialCharacters',
    'String::isEmail'                        => $base.'\String\StringTrait::isEmail',
    'String::isUrl'                          => $base.'\String\StringTrait::isUrl',
    'String::isUUID'                         => $base.'\String\StringTrait::isUUID',
    //Object
    'Object::__construct'                    => $base.'\Object\ObjectTrait::isObject',
    'Object::isInstanceOf'                   => $base.'\Object\ObjectTrait::isInstanceOf',
    'Object::hasProperty'                    => $base.'\Object\ObjectTrait::hasProperty',
    'Object::hasMethod'                      => $base.'\Object\ObjectTrait::hasMethod',
    'Object::hasParentClass'                 => $base.'\Object\ObjectTrait::hasParentClass',
    'Object::isChildOf'                      => $base.'\Object\ObjectTrait::isChildOf',
    'Object::inheritsFrom'                   => $base.'\Object\ObjectTrait::inheritsFrom',
    'Object::hasInterface'                   => $base.'\Object\ObjectTrait::hasInterface',
    //DateTime
    'DateTime::__construct'                  => $base.'\DateTime\DateTimeTrait::isDateTime',
    'DateTime::isAfter'                      => $base.'\DateTime\DateTimeTrait::isAfter',
    'DateTime::isBefore'                     => $base.'\DateTime\DateTimeTrait::isBefore',
    'DateTime::isBetween'                    => $base.'\DateTime\DateTimeTrait::isBetween',
    'DateTime::isWeekend'                    => $base.'\DateTime\DateTimeTrait::isWeekend',
    'DateTime::isWeekday'                    => $base.'\DateTime\DateTimeTrait::isWeekday',
    'DateTime::isMonday'                     => $base.'\DateTime\DateTimeTrait::isMonday',
    'DateTime::isTuesday'                    => $base.'\DateTime\DateTimeTrait::isTuesday',
    'DateTime::isWednesday'                  => $base.'\DateTime\DateTimeTrait::isWednesday',
    'DateTime::isThursday'                   => $base.'\DateTime\DateTimeTrait::isThursday',
    'DateTime::isFriday'                     => $base.'\DateTime\DateTimeTrait::isFriday',
    'DateTime::isSaturday'                   => $base.'\DateTime\DateTimeTrait::isSaturday',
    'DateTime::isSunday'                     => $base.'\DateTime\DateTimeTrait::isSunday',
    'DateTime::isToday'                      => $base.'\DateTime\DateTimeTrait::isToday',
    'DateTime::isYesterday'                  => $base.'\DateTime\DateTimeTrait::isYesterday',
    'DateTime::isTomorrow'                   => $base.'\DateTime\DateTimeTrait::isTomorrow',
    'DateTime::isLeapYear'                   => $base.'\DateTime\DateTimeTrait::isLeapYear',
    'DateTime::isMorning'                    => $base.'\DateTime\DateTimeTrait::isMorning',
    'DateTime::isAftenoon'                   => $base.'\DateTime\DateTimeTrait::isAftenoon',
    'DateTime::isEvening'                    => $base.'\DateTime\DateTimeTrait::isEvening',
    'DateTime::isNight'                      => $base.'\DateTime\DateTimeTrait::isNight',
    //Collection
    'Collection::__construct'                => $base.'\Collection\CollectionTrait::isArray',
    'Collection::each'                       => $base.'\Collection\CollectionTrait::each',
    'Collection::hasKeyFormat'               => $base.'\Collection\CollectionTrait::hasKeyFormat',
    'Collection::endsWith'                   => $base.'\Collection\CollectionTrait::endsWith',
    'Collection::contains'                   => $base.'\Collection\CollectionTrait::contains',
    'Collection::hasKey'                     => $base.'\Collection\CollectionTrait::hasKey',
    'Collection::hasLength'                  => $base.'\Collection\CollectionTrait::hasLength',
    'Collection::isNotEmpty'                 => $base.'\Collection\CollectionTrait::isNotEmpty',
    'Collection::startsWith'                 => $base.'\Collection\CollectionTrait::startsWith',
    //FileUpload
    'FileUpload::__construct'                => $base.'\FileUpload\FileUploadTrait::isUploaded',
    'FileUpload::isBetween'                  => $base.'\FileUpload\FileUploadTrait::isBetween',
    'FileUpload::isMimeType'                 => $base.'\FileUpload\FileUploadTrait::isMimeType',
    'FileUpload::hasFileNameFormat'          => $base.'\FileUpload\FileUploadTrait::hasFileNameFormat',
    'FileUpload::hasValidUploadDirectory'    => $base.'\FileUpload\FileUploadTrait::hasValidUploadDirectory',
    'FileUpload::notOverwritingExistingFile' => $base.'\FileUpload\FileUploadTrait::notOverwritingExistingFile',
    'FileUpload::isImage'                    => $base.'\FileUpload\FileUploadTrait::isImage',
    'FileUpload::hasLength'                  => $base.'\FileUpload\FileUploadTrait::hasLength',
];
